{
  "address": "0x5077D2D3a9E0ddF6EB2688d7D5133a026AD55a90",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "s",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "r",
          "type": "bytes"
        }
      ],
      "name": "Debug",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "u",
          "type": "uint256"
        }
      ],
      "name": "DebugUint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenCount",
          "type": "uint256"
        }
      ],
      "name": "convertToPure",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govTokenFaucet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountToConvert",
          "type": "uint256"
        }
      ],
      "name": "mintGovToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3551f34516f470b0c482547daeece0d7443180a03572ed183b0dbc64873faa0f",
  "receipt": {
    "to": null,
    "from": "0x81C1FC04c684020bE8B897f5bbe6f182b6e99121",
    "contractAddress": "0x5077D2D3a9E0ddF6EB2688d7D5133a026AD55a90",
    "transactionIndex": 1,
    "gasUsed": "2011355",
    "logsBloom": "0x
    "blockHash": "0xa6c1bee1c0a43a114aca9ace61d310ed77c8e812672c99ab5e4183104cdde0e0",
    "transactionHash": "0x3551f34516f470b0c482547daeece0d7443180a03572ed183b0dbc64873faa0f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10488600,
        "transactionHash": "0x3551f34516f470b0c482547daeece0d7443180a03572ed183b0dbc64873faa0f",
        "address": "0x5077D2D3a9E0ddF6EB2688d7D5133a026AD55a90",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081c1fc04c684020be8b897f5bbe6f182b6e99121"
        ],
        "data": "0x00000000000000000000000000000000000000000000021e19e0c9bab2400000",
        "logIndex": 5,
        "blockHash": "0xa6c1bee1c0a43a114aca9ace61d310ed77c8e812672c99ab5e4183104cdde0e0"
      }
    ],
    "blockNumber": 10488600,
    "cumulativeGasUsed": "2110487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pure Governance Token",
    "PGT"
  ],
  "numDeployments": 4,
  "solcInputHash": "9c73a477c705db327e77648d5edbe7ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"r\",\"type\":\"bytes\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"DebugUint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"}],\"name\":\"convertToPure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govTokenFaucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountToConvert\",\"type\":\"uint256\"}],\"name\":\"mintGovToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PureGovernanceToken.sol\":\"PureGovernanceToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PureGovernanceToken.sol\":{\"content\":\"pragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\n\\r\\ncontract PureGovernanceToken is ERC20, ERC20Burnable {\\r\\n  event Debug(bool s, bytes r);\\r\\n  event DebugUint(uint256 u);\\r\\n  \\r\\n  uint256 public genesisTime;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol) ERC20(\\\"Pure Governance Token\\\", \\\"PGT\\\") {\\r\\n    genesisTime = block.timestamp;\\r\\n    _mint(msg.sender, 10000 * 10 ** decimals());\\r\\n  }\\r\\n\\r\\n  function convertToPure(uint tokenCount) public returns (bool success) {\\r\\n      uint256 tokensToConvert = tokenCount * 10 ** decimals();\\r\\n      _burn(msg.sender, tokensToConvert);\\r\\n\\r\\n      address pureTokenAddr = 0x2f53b23De0FF53353cC1cEb704f8022D47e1E310;\\r\\n      (bool s, bytes memory r) = pureTokenAddr.call(abi.encodeWithSignature(\\\"mintPure(address,address,uint256)\\\", msg.sender, address(this), tokensToConvert));\\r\\n      emit Debug(s, r);\\r\\n      return true;\\r\\n  }\\r\\n\\r\\n  function mintGovToken(address senderAddress, uint256 amountToConvert) public {\\r\\n    uint256 currTime = block.timestamp;\\r\\n    uint256 secsSinceGenesis = currTime - genesisTime;\\r\\n    emit DebugUint(amountToConvert);\\r\\n    uint256 monthsSinceGenesis = secsSinceGenesis / (60 * 60 * 24 * 12);\\r\\n    uint256 numerator = 101 ** monthsSinceGenesis;\\r\\n    emit DebugUint(numerator);\\r\\n    uint256 denominatorPow = 2 * monthsSinceGenesis;\\r\\n    uint256 inflationRate = numerator / (10 ** denominatorPow); \\r\\n    uint256 inflatedDollar = amountToConvert * inflationRate;\\r\\n    emit DebugUint(inflatedDollar);\\r\\n\\r\\n    emit DebugUint(getGovTokensPerTenDollars() / 10);\\r\\n    uint256 govTokenAmount = (inflatedDollar * getGovTokensPerTenDollars()) / 10;\\r\\n    emit DebugUint(govTokenAmount);\\r\\n\\r\\n    _mint(senderAddress, govTokenAmount);\\r\\n  }\\r\\n\\r\\n  function govTokenFaucet() public {\\r\\n    _mint(msg.sender, 10000 * 10 ** decimals());\\r\\n  }\\r\\n\\r\\n  function getGovTokensPerTenDollars() private returns (uint256) {\\r\\n    return 5;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x91a6ad22d28481c4284c7f609b802f5af1fa25b511488b9b419fef266a3af604\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002a4038038062002a408339818101604052810190620000379190620004fc565b6040518060400160405280601581526020017f5075726520476f7665726e616e636520546f6b656e00000000000000000000008152506040518060400160405280600381526020017f50475400000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb929190620002af565b508060049080519060200190620000d4929190620002af565b505050426005819055506200011c33620000f36200012460201b60201c565b600a6200010191906200071b565b6127106200011091906200076c565b6200012d60201b60201c565b50506200093f565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200019f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000196906200082e565b60405180910390fd5b620001b360008383620002a560201b60201c565b8060026000828254620001c7919062000850565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200021e919062000850565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002859190620008be565b60405180910390a3620002a160008383620002aa60201b60201c565b5050565b505050565b505050565b828054620002bd906200090a565b90600052602060002090601f016020900481019282620002e157600085556200032d565b82601f10620002fc57805160ff19168380011785556200032d565b828001600101855582156200032d579182015b828111156200032c5782518255916020019190600101906200030f565b5b5090506200033c919062000340565b5090565b5b808211156200035b57600081600090555060010162000341565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003c8826200037d565b810181811067ffffffffffffffff82111715620003ea57620003e96200038e565b5b80604052505050565b6000620003ff6200035f565b90506200040d8282620003bd565b919050565b600067ffffffffffffffff82111562000430576200042f6200038e565b5b6200043b826200037d565b9050602081019050919050565b60005b83811015620004685780820151818401526020810190506200044b565b8381111562000478576000848401525b50505050565b6000620004956200048f8462000412565b620003f3565b905082815260208101848484011115620004b457620004b362000378565b5b620004c184828562000448565b509392505050565b600082601f830112620004e157620004e062000373565b5b8151620004f38482602086016200047e565b91505092915050565b6000806040838503121562000516576200051562000369565b5b600083015167ffffffffffffffff8111156200053757620005366200036e565b5b6200054585828601620004c9565b925050602083015167ffffffffffffffff8111156200056957620005686200036e565b5b6200057785828601620004c9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200060f57808604811115620005e757620005e662000581565b5b6001851615620005f75780820291505b80810290506200060785620005b0565b9450620005c7565b94509492505050565b6000826200062a5760019050620006fd565b816200063a5760009050620006fd565b81600181146200065357600281146200065e5762000694565b6001915050620006fd565b60ff84111562000673576200067262000581565b5b8360020a9150848211156200068d576200068c62000581565b5b50620006fd565b5060208310610133831016604e8410600b8410161715620006ce5782820a905083811115620006c857620006c762000581565b5b620006fd565b620006dd8484846001620005bd565b92509050818404811115620006f757620006f662000581565b5b81810290505b9392505050565b6000819050919050565b600060ff82169050919050565b6000620007288262000704565b915062000735836200070e565b9250620007647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000618565b905092915050565b6000620007798262000704565b9150620007868362000704565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620007c257620007c162000581565b5b828202905092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000816601f83620007cd565b91506200082382620007de565b602082019050919050565b60006020820190508181036000830152620008498162000807565b9050919050565b60006200085d8262000704565b91506200086a8362000704565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620008a257620008a162000581565b5b828201905092915050565b620008b88162000704565b82525050565b6000602082019050620008d56000830184620008ad565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200092357607f821691505b602082108103620009395762000938620008db565b5b50919050565b6120f1806200094f6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806342966c68116100a257806395d89b411161007157806395d89b41146102ba578063a457c2d7146102d8578063a9059cbb14610308578063d688c1b914610338578063dd62ed3e146103545761010b565b806342966c681461023457806342c6498a1461025057806370a082311461026e57806379cc67901461029e5761010b565b806323b872dd116100de57806323b872dd146101ac578063242aa4c5146101dc578063313ce567146101e657806339509351146102045761010b565b806306fdde0314610110578063095ea7b31461012e57806313ab25e81461015e57806318160ddd1461018e575b600080fd5b610118610384565b604051610125919061141a565b60405180910390f35b610148600480360381019061014391906114d5565b610416565b6040516101559190611530565b60405180910390f35b6101786004803603810190610173919061154b565b610439565b6040516101859190611530565b60405180910390f35b6101966105c6565b6040516101a39190611587565b60405180910390f35b6101c660048036038101906101c191906115a2565b6105d0565b6040516101d39190611530565b60405180910390f35b6101e46105ff565b005b6101ee61062b565b6040516101fb9190611611565b60405180910390f35b61021e600480360381019061021991906114d5565b610634565b60405161022b9190611530565b60405180910390f35b61024e6004803603810190610249919061154b565b6106de565b005b6102586106f2565b6040516102659190611587565b60405180910390f35b6102886004803603810190610283919061162c565b6106f8565b6040516102959190611587565b60405180910390f35b6102b860048036038101906102b391906114d5565b610740565b005b6102c2610760565b6040516102cf919061141a565b60405180910390f35b6102f260048036038101906102ed91906114d5565b6107f2565b6040516102ff9190611530565b60405180910390f35b610322600480360381019061031d91906114d5565b6108dc565b60405161032f9190611530565b60405180910390f35b610352600480360381019061034d91906114d5565b6108ff565b005b61036e60048036038101906103699190611659565b610ad6565b60405161037b9190611587565b60405180910390f35b606060038054610393906116c8565b80601f01602080910402602001604051908101604052809291908181526020018280546103bf906116c8565b801561040c5780601f106103e15761010080835404028352916020019161040c565b820191906000526020600020905b8154815290600101906020018083116103ef57829003601f168201915b5050505050905090565b600080610421610b5d565b905061042e818585610b65565b600191505092915050565b60008061044461062b565b600a610450919061185b565b8361045b91906118a6565b90506104673382610d2e565b6000732f53b23de0ff53353cc1ceb704f8022d47e1e31090506000808273ffffffffffffffffffffffffffffffffffffffff163330866040516024016104af9392919061190f565b6040516020818303038152906040527fbad914f4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610539919061198d565b6000604051808303816000865af19150503d8060008114610576576040519150601f19603f3d011682016040523d82523d6000602084013e61057b565b606091505b50915091507f099ce1822f97ad29a195bc4c64a153893ef6da574f5d98df8c998c21d349688382826040516105b19291906119ee565b60405180910390a16001945050505050919050565b6000600254905090565b6000806105db610b5d565b90506105e8858285610f04565b6105f3858585610f90565b60019150509392505050565b6106293361060b61062b565b600a610617919061185b565b61271061062491906118a6565b61120f565b565b60006012905090565b60008061063f610b5d565b90506106d3818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106ce9190611a1e565b610b65565b600191505092915050565b6106ef6106e9610b5d565b82610d2e565b50565b60055481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107528261074c610b5d565b83610f04565b61075c8282610d2e565b5050565b60606004805461076f906116c8565b80601f016020809104026020016040519081016040528092919081815260200182805461079b906116c8565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050505050905090565b6000806107fd610b5d565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90611ae6565b60405180910390fd5b6108d08286868403610b65565b60019250505092915050565b6000806108e7610b5d565b90506108f4818585610f90565b600191505092915050565b60004290506000600554826109149190611b06565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe836040516109459190611587565b60405180910390a16000620fd2008261095e9190611b69565b9050600081606561096f9190611b9a565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe816040516109a09190611587565b60405180910390a160008260026109b791906118a6565b9050600081600a6109c89190611b9a565b836109d39190611b69565b9050600081886109e391906118a6565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe81604051610a149190611587565b60405180910390a17ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe600a610a4761136e565b610a519190611b69565b604051610a5e9190611587565b60405180910390a16000600a610a7261136e565b83610a7d91906118a6565b610a879190611b69565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe81604051610ab89190611587565b60405180910390a1610aca8a8261120f565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611c57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90611ce9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d219190611587565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9490611d7b565b60405180910390fd5b610da982600083611377565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2690611e0d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610e869190611b06565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eeb9190611587565b60405180910390a3610eff8360008461137c565b505050565b6000610f108484610ad6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f8a5781811015610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390611e79565b60405180910390fd5b610f898484848403610b65565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff690611f0b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590611f9d565b60405180910390fd5b611079838383611377565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f69061202f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111929190611a1e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111f69190611587565b60405180910390a361120984848461137c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361127e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112759061209b565b60405180910390fd5b61128a60008383611377565b806002600082825461129c9190611a1e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611a1e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113569190611587565b60405180910390a361136a6000838361137c565b5050565b60006005905090565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113bb5780820151818401526020810190506113a0565b838111156113ca576000848401525b50505050565b6000601f19601f8301169050919050565b60006113ec82611381565b6113f6818561138c565b935061140681856020860161139d565b61140f816113d0565b840191505092915050565b6000602082019050818103600083015261143481846113e1565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061146c82611441565b9050919050565b61147c81611461565b811461148757600080fd5b50565b60008135905061149981611473565b92915050565b6000819050919050565b6114b28161149f565b81146114bd57600080fd5b50565b6000813590506114cf816114a9565b92915050565b600080604083850312156114ec576114eb61143c565b5b60006114fa8582860161148a565b925050602061150b858286016114c0565b9150509250929050565b60008115159050919050565b61152a81611515565b82525050565b60006020820190506115456000830184611521565b92915050565b6000602082840312156115615761156061143c565b5b600061156f848285016114c0565b91505092915050565b6115818161149f565b82525050565b600060208201905061159c6000830184611578565b92915050565b6000806000606084860312156115bb576115ba61143c565b5b60006115c98682870161148a565b93505060206115da8682870161148a565b92505060406115eb868287016114c0565b9150509250925092565b600060ff82169050919050565b61160b816115f5565b82525050565b60006020820190506116266000830184611602565b92915050565b6000602082840312156116425761164161143c565b5b60006116508482850161148a565b91505092915050565b600080604083850312156116705761166f61143c565b5b600061167e8582860161148a565b925050602061168f8582860161148a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806116e057607f821691505b6020821081036116f3576116f2611699565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561177f5780860481111561175b5761175a6116f9565b5b600185161561176a5780820291505b808102905061177885611728565b945061173f565b94509492505050565b6000826117985760019050611854565b816117a65760009050611854565b81600181146117bc57600281146117c6576117f5565b6001915050611854565b60ff8411156117d8576117d76116f9565b5b8360020a9150848211156117ef576117ee6116f9565b5b50611854565b5060208310610133831016604e8410600b841016171561182a5782820a905083811115611825576118246116f9565b5b611854565b6118378484846001611735565b9250905081840481111561184e5761184d6116f9565b5b81810290505b9392505050565b60006118668261149f565b9150611871836115f5565b925061189e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611788565b905092915050565b60006118b18261149f565b91506118bc8361149f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118f5576118f46116f9565b5b828202905092915050565b61190981611461565b82525050565b60006060820190506119246000830186611900565b6119316020830185611900565b61193e6040830184611578565b949350505050565b600081519050919050565b600081905092915050565b600061196782611946565b6119718185611951565b935061198181856020860161139d565b80840191505092915050565b6000611999828461195c565b915081905092915050565b600082825260208201905092915050565b60006119c082611946565b6119ca81856119a4565b93506119da81856020860161139d565b6119e3816113d0565b840191505092915050565b6000604082019050611a036000830185611521565b8181036020830152611a1581846119b5565b90509392505050565b6000611a298261149f565b9150611a348361149f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a6957611a686116f9565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611ad060258361138c565b9150611adb82611a74565b604082019050919050565b60006020820190508181036000830152611aff81611ac3565b9050919050565b6000611b118261149f565b9150611b1c8361149f565b925082821015611b2f57611b2e6116f9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b748261149f565b9150611b7f8361149f565b925082611b8f57611b8e611b3a565b5b828204905092915050565b6000611ba58261149f565b9150611bb08361149f565b9250611bdd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611788565b905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611c4160248361138c565b9150611c4c82611be5565b604082019050919050565b60006020820190508181036000830152611c7081611c34565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611cd360228361138c565b9150611cde82611c77565b604082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611d6560218361138c565b9150611d7082611d09565b604082019050919050565b60006020820190508181036000830152611d9481611d58565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611df760228361138c565b9150611e0282611d9b565b604082019050919050565b60006020820190508181036000830152611e2681611dea565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611e63601d8361138c565b9150611e6e82611e2d565b602082019050919050565b60006020820190508181036000830152611e9281611e56565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ef560258361138c565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611f8760238361138c565b9150611f9282611f2b565b604082019050919050565b60006020820190508181036000830152611fb681611f7a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061201960268361138c565b915061202482611fbd565b604082019050919050565b600060208201905081810360008301526120488161200c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612085601f8361138c565b91506120908261204f565b602082019050919050565b600060208201905081810360008301526120b481612078565b905091905056fea26469706673582212200026ff45420989bcbc346efa2ebd672914a7e3bfb67334ac3503ea63dc5bc21864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806342966c68116100a257806395d89b411161007157806395d89b41146102ba578063a457c2d7146102d8578063a9059cbb14610308578063d688c1b914610338578063dd62ed3e146103545761010b565b806342966c681461023457806342c6498a1461025057806370a082311461026e57806379cc67901461029e5761010b565b806323b872dd116100de57806323b872dd146101ac578063242aa4c5146101dc578063313ce567146101e657806339509351146102045761010b565b806306fdde0314610110578063095ea7b31461012e57806313ab25e81461015e57806318160ddd1461018e575b600080fd5b610118610384565b604051610125919061141a565b60405180910390f35b610148600480360381019061014391906114d5565b610416565b6040516101559190611530565b60405180910390f35b6101786004803603810190610173919061154b565b610439565b6040516101859190611530565b60405180910390f35b6101966105c6565b6040516101a39190611587565b60405180910390f35b6101c660048036038101906101c191906115a2565b6105d0565b6040516101d39190611530565b60405180910390f35b6101e46105ff565b005b6101ee61062b565b6040516101fb9190611611565b60405180910390f35b61021e600480360381019061021991906114d5565b610634565b60405161022b9190611530565b60405180910390f35b61024e6004803603810190610249919061154b565b6106de565b005b6102586106f2565b6040516102659190611587565b60405180910390f35b6102886004803603810190610283919061162c565b6106f8565b6040516102959190611587565b60405180910390f35b6102b860048036038101906102b391906114d5565b610740565b005b6102c2610760565b6040516102cf919061141a565b60405180910390f35b6102f260048036038101906102ed91906114d5565b6107f2565b6040516102ff9190611530565b60405180910390f35b610322600480360381019061031d91906114d5565b6108dc565b60405161032f9190611530565b60405180910390f35b610352600480360381019061034d91906114d5565b6108ff565b005b61036e60048036038101906103699190611659565b610ad6565b60405161037b9190611587565b60405180910390f35b606060038054610393906116c8565b80601f01602080910402602001604051908101604052809291908181526020018280546103bf906116c8565b801561040c5780601f106103e15761010080835404028352916020019161040c565b820191906000526020600020905b8154815290600101906020018083116103ef57829003601f168201915b5050505050905090565b600080610421610b5d565b905061042e818585610b65565b600191505092915050565b60008061044461062b565b600a610450919061185b565b8361045b91906118a6565b90506104673382610d2e565b6000732f53b23de0ff53353cc1ceb704f8022d47e1e31090506000808273ffffffffffffffffffffffffffffffffffffffff163330866040516024016104af9392919061190f565b6040516020818303038152906040527fbad914f4000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610539919061198d565b6000604051808303816000865af19150503d8060008114610576576040519150601f19603f3d011682016040523d82523d6000602084013e61057b565b606091505b50915091507f099ce1822f97ad29a195bc4c64a153893ef6da574f5d98df8c998c21d349688382826040516105b19291906119ee565b60405180910390a16001945050505050919050565b6000600254905090565b6000806105db610b5d565b90506105e8858285610f04565b6105f3858585610f90565b60019150509392505050565b6106293361060b61062b565b600a610617919061185b565b61271061062491906118a6565b61120f565b565b60006012905090565b60008061063f610b5d565b90506106d3818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106ce9190611a1e565b610b65565b600191505092915050565b6106ef6106e9610b5d565b82610d2e565b50565b60055481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6107528261074c610b5d565b83610f04565b61075c8282610d2e565b5050565b60606004805461076f906116c8565b80601f016020809104026020016040519081016040528092919081815260200182805461079b906116c8565b80156107e85780601f106107bd576101008083540402835291602001916107e8565b820191906000526020600020905b8154815290600101906020018083116107cb57829003601f168201915b5050505050905090565b6000806107fd610b5d565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba90611ae6565b60405180910390fd5b6108d08286868403610b65565b60019250505092915050565b6000806108e7610b5d565b90506108f4818585610f90565b600191505092915050565b60004290506000600554826109149190611b06565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe836040516109459190611587565b60405180910390a16000620fd2008261095e9190611b69565b9050600081606561096f9190611b9a565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe816040516109a09190611587565b60405180910390a160008260026109b791906118a6565b9050600081600a6109c89190611b9a565b836109d39190611b69565b9050600081886109e391906118a6565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe81604051610a149190611587565b60405180910390a17ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe600a610a4761136e565b610a519190611b69565b604051610a5e9190611587565b60405180910390a16000600a610a7261136e565b83610a7d91906118a6565b610a879190611b69565b90507ff0ed029e274dabb7636aeed7333cf47bc8c97dd6eb6d8faea6e9bfbd6620bebe81604051610ab89190611587565b60405180910390a1610aca8a8261120f565b50505050505050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bcb90611c57565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3a90611ce9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d219190611587565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9490611d7b565b60405180910390fd5b610da982600083611377565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610e2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2690611e0d565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610e869190611b06565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610eeb9190611587565b60405180910390a3610eff8360008461137c565b505050565b6000610f108484610ad6565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610f8a5781811015610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390611e79565b60405180910390fd5b610f898484848403610b65565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff690611f0b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361106e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106590611f9d565b60405180910390fd5b611079838383611377565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f69061202f565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111929190611a1e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111f69190611587565b60405180910390a361120984848461137c565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361127e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112759061209b565b60405180910390fd5b61128a60008383611377565b806002600082825461129c9190611a1e565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112f19190611a1e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113569190611587565b60405180910390a361136a6000838361137c565b5050565b60006005905090565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156113bb5780820151818401526020810190506113a0565b838111156113ca576000848401525b50505050565b6000601f19601f8301169050919050565b60006113ec82611381565b6113f6818561138c565b935061140681856020860161139d565b61140f816113d0565b840191505092915050565b6000602082019050818103600083015261143481846113e1565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061146c82611441565b9050919050565b61147c81611461565b811461148757600080fd5b50565b60008135905061149981611473565b92915050565b6000819050919050565b6114b28161149f565b81146114bd57600080fd5b50565b6000813590506114cf816114a9565b92915050565b600080604083850312156114ec576114eb61143c565b5b60006114fa8582860161148a565b925050602061150b858286016114c0565b9150509250929050565b60008115159050919050565b61152a81611515565b82525050565b60006020820190506115456000830184611521565b92915050565b6000602082840312156115615761156061143c565b5b600061156f848285016114c0565b91505092915050565b6115818161149f565b82525050565b600060208201905061159c6000830184611578565b92915050565b6000806000606084860312156115bb576115ba61143c565b5b60006115c98682870161148a565b93505060206115da8682870161148a565b92505060406115eb868287016114c0565b9150509250925092565b600060ff82169050919050565b61160b816115f5565b82525050565b60006020820190506116266000830184611602565b92915050565b6000602082840312156116425761164161143c565b5b60006116508482850161148a565b91505092915050565b600080604083850312156116705761166f61143c565b5b600061167e8582860161148a565b925050602061168f8582860161148a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806116e057607f821691505b6020821081036116f3576116f2611699565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111561177f5780860481111561175b5761175a6116f9565b5b600185161561176a5780820291505b808102905061177885611728565b945061173f565b94509492505050565b6000826117985760019050611854565b816117a65760009050611854565b81600181146117bc57600281146117c6576117f5565b6001915050611854565b60ff8411156117d8576117d76116f9565b5b8360020a9150848211156117ef576117ee6116f9565b5b50611854565b5060208310610133831016604e8410600b841016171561182a5782820a905083811115611825576118246116f9565b5b611854565b6118378484846001611735565b9250905081840481111561184e5761184d6116f9565b5b81810290505b9392505050565b60006118668261149f565b9150611871836115f5565b925061189e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611788565b905092915050565b60006118b18261149f565b91506118bc8361149f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118f5576118f46116f9565b5b828202905092915050565b61190981611461565b82525050565b60006060820190506119246000830186611900565b6119316020830185611900565b61193e6040830184611578565b949350505050565b600081519050919050565b600081905092915050565b600061196782611946565b6119718185611951565b935061198181856020860161139d565b80840191505092915050565b6000611999828461195c565b915081905092915050565b600082825260208201905092915050565b60006119c082611946565b6119ca81856119a4565b93506119da81856020860161139d565b6119e3816113d0565b840191505092915050565b6000604082019050611a036000830185611521565b8181036020830152611a1581846119b5565b90509392505050565b6000611a298261149f565b9150611a348361149f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611a6957611a686116f9565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611ad060258361138c565b9150611adb82611a74565b604082019050919050565b60006020820190508181036000830152611aff81611ac3565b9050919050565b6000611b118261149f565b9150611b1c8361149f565b925082821015611b2f57611b2e6116f9565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611b748261149f565b9150611b7f8361149f565b925082611b8f57611b8e611b3a565b5b828204905092915050565b6000611ba58261149f565b9150611bb08361149f565b9250611bdd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611788565b905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611c4160248361138c565b9150611c4c82611be5565b604082019050919050565b60006020820190508181036000830152611c7081611c34565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611cd360228361138c565b9150611cde82611c77565b604082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611d6560218361138c565b9150611d7082611d09565b604082019050919050565b60006020820190508181036000830152611d9481611d58565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611df760228361138c565b9150611e0282611d9b565b604082019050919050565b60006020820190508181036000830152611e2681611dea565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611e63601d8361138c565b9150611e6e82611e2d565b602082019050919050565b60006020820190508181036000830152611e9281611e56565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611ef560258361138c565b9150611f0082611e99565b604082019050919050565b60006020820190508181036000830152611f2481611ee8565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611f8760238361138c565b9150611f9282611f2b565b604082019050919050565b60006020820190508181036000830152611fb681611f7a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061201960268361138c565b915061202482611fbd565b604082019050919050565b600060208201905081810360008301526120488161200c565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612085601f8361138c565b91506120908261204f565b602082019050919050565b600060208201905081810360008301526120b481612078565b905091905056fea26469706673582212200026ff45420989bcbc346efa2ebd672914a7e3bfb67334ac3503ea63dc5bc21864736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 237,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 243,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 245,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 247,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 249,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 19,
        "contract": "contracts/PureGovernanceToken.sol:PureGovernanceToken",
        "label": "genesisTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}