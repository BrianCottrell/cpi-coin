{
  "address": "0x2f53b23De0FF53353cC1cEb704f8022D47e1E310",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "s",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "r",
          "type": "bytes"
        }
      ],
      "name": "Debug",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToConvert",
          "type": "uint256"
        }
      ],
      "name": "convertToGovToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dollarsSpent",
          "type": "uint256"
        }
      ],
      "name": "inflationAdjustedDollars",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "senderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "smartContractAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "govTokenCount",
          "type": "uint256"
        }
      ],
      "name": "mintPure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93a03200a822c4df8eb6885e4e197e7ba1b7fc69491bc7b4fc1a915ce0927d1b",
  "receipt": {
    "to": null,
    "from": "0x81C1FC04c684020bE8B897f5bbe6f182b6e99121",
    "contractAddress": "0x2f53b23De0FF53353cC1cEb704f8022D47e1E310",
    "transactionIndex": 1,
    "gasUsed": "1969976",
    "logsBloom": "0x
    "blockHash": "0x7033f51ebecc63879ba155b9b7c01413254bb91a676eb7b9bbcaca36d2919215",
    "transactionHash": "0x93a03200a822c4df8eb6885e4e197e7ba1b7fc69491bc7b4fc1a915ce0927d1b",
    "logs": [],
    "blockNumber": 10487593,
    "cumulativeGasUsed": "2160447",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Pure Token",
    "PTK"
  ],
  "numDeployments": 1,
  "solcInputHash": "adacf80d2d256844c6e9441320e902d7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"r\",\"type\":\"bytes\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToConvert\",\"type\":\"uint256\"}],\"name\":\"convertToGovToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dollarsSpent\",\"type\":\"uint256\"}],\"name\":\"inflationAdjustedDollars\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"smartContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"govTokenCount\",\"type\":\"uint256\"}],\"name\":\"mintPure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PureToken.sol\":\"PureToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PureToken.sol\":{\"content\":\"pragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\r\\n\\r\\ncontract PureToken is  ERC20, ERC20Burnable {\\r\\n  event Debug(bool s, bytes r);\\r\\n\\r\\n  //We inherited the DetailedERC20\\r\\n  mapping(address => address) public balances;\\r\\n\\r\\n  uint256 public genesisTime;\\r\\n\\r\\n  constructor(string memory _name, string memory _symbol) ERC20(\\\"Pure Token\\\", \\\"PTK\\\") {\\r\\n    genesisTime = block.timestamp;\\r\\n  }\\r\\n\\r\\n  function mintPure(address senderAddress, address smartContractAddress, uint256 govTokenCount) public {\\r\\n      // Convert governance tokens amount to dollars\\r\\n\\r\\n      balances[senderAddress] = smartContractAddress;\\r\\n      uint256 conversionRate = (getGovTokenPerTenDollars() / 10);\\r\\n      uint256 dollarsSpent = govTokenCount / conversionRate;\\r\\n      uint256 iad = inflationAdjustedDollars(dollarsSpent);\\r\\n      _mint(senderAddress, iad);\\r\\n  }\\r\\n\\r\\n  function inflationAdjustedDollars(uint256 dollarsSpent) public returns (uint256) {\\r\\n      uint256 currTime = block.timestamp;\\r\\n      uint256 secsSinceGenesis = currTime - genesisTime;\\r\\n      uint256 monthsSinceGenesis = secsSinceGenesis / (60 * 60 * 24 * 12);\\r\\n      uint256 numerator = 98 ** monthsSinceGenesis;\\r\\n      uint256 denominatorPow = 2 * monthsSinceGenesis;\\r\\n      uint256 res = numerator * dollarsSpent / (10 ** denominatorPow);\\r\\n      return res;\\r\\n  }\\r\\n\\r\\n  function convertToGovToken(uint256 amountToConvert) public returns (bool success) {\\r\\n    amountToConvert = amountToConvert * 10 ** decimals();\\r\\n    _burn(msg.sender, amountToConvert);\\r\\n    \\r\\n    address govTokenAddress = balances[msg.sender];\\r\\n    if (govTokenAddress == address(0)) {\\r\\n      return false;\\r\\n    }\\r\\n  \\r\\n    (bool s, bytes memory r) = govTokenAddress.call(abi.encodeWithSignature(\\\"mintGovToken(address,uint256)\\\", msg.sender, amountToConvert));\\r\\n    emit Debug(s,r);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  function getGovTokenPerTenDollars() private pure returns (uint256) {\\r\\n      return 50; //TODO test\\r\\n  }\\r\\n}\",\"keccak256\":\"0xa9ef7cd740ba6f576cca33b6e703cf8e1e3959faf18b0c326b686100db26a6ad\"},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"openzeppelin-solidity/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200258838038062002588833981810160405281019062000037919062000333565b6040518060400160405280600a81526020017f5075726520546f6b656e000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f50544b00000000000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb929190620000e6565b508060049080519060200190620000d4929190620000e6565b5050504260068190555050506200041c565b828054620000f490620003e7565b90600052602060002090601f01602090048101928262000118576000855562000164565b82601f106200013357805160ff191683800117855562000164565b8280016001018555821562000164579182015b828111156200016357825182559160200191906001019062000146565b5b50905062000173919062000177565b5090565b5b808211156200019257600081600090555060010162000178565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001ff82620001b4565b810181811067ffffffffffffffff82111715620002215762000220620001c5565b5b80604052505050565b60006200023662000196565b9050620002448282620001f4565b919050565b600067ffffffffffffffff821115620002675762000266620001c5565b5b6200027282620001b4565b9050602081019050919050565b60005b838110156200029f57808201518184015260208101905062000282565b83811115620002af576000848401525b50505050565b6000620002cc620002c68462000249565b6200022a565b905082815260208101848484011115620002eb57620002ea620001af565b5b620002f88482856200027f565b509392505050565b600082601f830112620003185762000317620001aa565b5b81516200032a848260208601620002b5565b91505092915050565b600080604083850312156200034d576200034c620001a0565b5b600083015167ffffffffffffffff8111156200036e576200036d620001a5565b5b6200037c8582860162000300565b925050602083015167ffffffffffffffff811115620003a0576200039f620001a5565b5b620003ae8582860162000300565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200040057607f821691505b602082108103620004165762000415620003b8565b5b50919050565b61215c806200042c6000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c806342c6498a116100a2578063a457c2d711610071578063a457c2d714610309578063a9059cbb14610339578063bad914f414610369578063d54024b014610385578063dd62ed3e146103b557610116565b806342c6498a1461028157806370a082311461029f57806379cc6790146102cf57806395d89b41146102eb57610116565b806327e235e3116100e957806327e235e3146101b7578063313ce567146101e7578063374be0f014610205578063395093511461023557806342966c681461026557610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b6101236103e5565b6040516101309190611478565b60405180910390f35b610153600480360381019061014e9190611533565b610477565b604051610160919061158e565b60405180910390f35b61017161049a565b60405161017e91906115b8565b60405180910390f35b6101a1600480360381019061019c91906115d3565b6104a4565b6040516101ae919061158e565b60405180910390f35b6101d160048036038101906101cc9190611626565b6104d3565b6040516101de9190611662565b60405180910390f35b6101ef610506565b6040516101fc9190611699565b60405180910390f35b61021f600480360381019061021a91906116b4565b61050f565b60405161022c919061158e565b60405180910390f35b61024f600480360381019061024a9190611533565b610722565b60405161025c919061158e565b60405180910390f35b61027f600480360381019061027a91906116b4565b6107cc565b005b6102896107e0565b60405161029691906115b8565b60405180910390f35b6102b960048036038101906102b49190611626565b6107e6565b6040516102c691906115b8565b60405180910390f35b6102e960048036038101906102e49190611533565b61082e565b005b6102f361084e565b6040516103009190611478565b60405180910390f35b610323600480360381019061031e9190611533565b6108e0565b604051610330919061158e565b60405180910390f35b610353600480360381019061034e9190611533565b6109ca565b604051610360919061158e565b60405180910390f35b610383600480360381019061037e91906115d3565b6109ed565b005b61039f600480360381019061039a91906116b4565b610ab2565b6040516103ac91906115b8565b60405180910390f35b6103cf60048036038101906103ca91906116e1565b610b34565b6040516103dc91906115b8565b60405180910390f35b6060600380546103f490611750565b80601f016020809104026020016040519081016040528092919081815260200182805461042090611750565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b5050505050905090565b600080610482610bbb565b905061048f818585610bc3565b600191505092915050565b6000600254905090565b6000806104af610bbb565b90506104bc858285610d8c565b6104c7858585610e18565b60019150509392505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b6000610519610506565b600a61052591906118e3565b82610530919061192e565b915061053c3383611097565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105de57600091505061071d565b6000808273ffffffffffffffffffffffffffffffffffffffff16338660405160240161060b929190611988565b6040516020818303038152906040527fd688c1b9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161069591906119f8565b6000604051808303816000865af19150503d80600081146106d2576040519150601f19603f3d011682016040523d82523d6000602084013e6106d7565b606091505b50915091507f099ce1822f97ad29a195bc4c64a153893ef6da574f5d98df8c998c21d3496883828260405161070d929190611a59565b60405180910390a1600193505050505b919050565b60008061072d610bbb565b90506107c1818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107bc9190611a89565b610bc3565b600191505092915050565b6107dd6107d7610bbb565b82611097565b50565b60065481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108408261083a610bbb565b83610d8c565b61084a8282611097565b5050565b60606004805461085d90611750565b80601f016020809104026020016040519081016040528092919081815260200182805461088990611750565b80156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b6000806108eb610bbb565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890611b51565b60405180910390fd5b6109be8286868403610bc3565b60019250505092915050565b6000806109d5610bbb565b90506109e2818585610e18565b600191505092915050565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a610a7761126d565b610a819190611ba0565b905060008183610a919190611ba0565b90506000610a9e82610ab2565b9050610aaa8682611276565b505050505050565b600080429050600060065482610ac89190611bd1565b90506000620fd20082610adb9190611ba0565b90506000816062610aec9190611c05565b90506000826002610afd919061192e565b9050600081600a610b0e9190611c05565b8884610b1a919061192e565b610b249190611ba0565b9050809650505050505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2990611cc2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890611d54565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d7f91906115b8565b60405180910390a3505050565b6000610d988484610b34565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e125781811015610e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfb90611dc0565b60405180910390fd5b610e118484848403610bc3565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90611e52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90611ee4565b60405180910390fd5b610f018383836113d5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611f76565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461101a9190611a89565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161107e91906115b8565b60405180910390a36110918484846113da565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd90612008565b60405180910390fd5b611112826000836113d5565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118f9061209a565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546111ef9190611bd1565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161125491906115b8565b60405180910390a3611268836000846113da565b505050565b60006032905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc90612106565b60405180910390fd5b6112f1600083836113d5565b80600260008282546113039190611a89565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113589190611a89565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113bd91906115b8565b60405180910390a36113d1600083836113da565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114195780820151818401526020810190506113fe565b83811115611428576000848401525b50505050565b6000601f19601f8301169050919050565b600061144a826113df565b61145481856113ea565b93506114648185602086016113fb565b61146d8161142e565b840191505092915050565b60006020820190508181036000830152611492818461143f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ca8261149f565b9050919050565b6114da816114bf565b81146114e557600080fd5b50565b6000813590506114f7816114d1565b92915050565b6000819050919050565b611510816114fd565b811461151b57600080fd5b50565b60008135905061152d81611507565b92915050565b6000806040838503121561154a5761154961149a565b5b6000611558858286016114e8565b92505060206115698582860161151e565b9150509250929050565b60008115159050919050565b61158881611573565b82525050565b60006020820190506115a3600083018461157f565b92915050565b6115b2816114fd565b82525050565b60006020820190506115cd60008301846115a9565b92915050565b6000806000606084860312156115ec576115eb61149a565b5b60006115fa868287016114e8565b935050602061160b868287016114e8565b925050604061161c8682870161151e565b9150509250925092565b60006020828403121561163c5761163b61149a565b5b600061164a848285016114e8565b91505092915050565b61165c816114bf565b82525050565b60006020820190506116776000830184611653565b92915050565b600060ff82169050919050565b6116938161167d565b82525050565b60006020820190506116ae600083018461168a565b92915050565b6000602082840312156116ca576116c961149a565b5b60006116d88482850161151e565b91505092915050565b600080604083850312156116f8576116f761149a565b5b6000611706858286016114e8565b9250506020611717858286016114e8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061176857607f821691505b60208210810361177b5761177a611721565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611807578086048111156117e3576117e2611781565b5b60018516156117f25780820291505b8081029050611800856117b0565b94506117c7565b94509492505050565b60008261182057600190506118dc565b8161182e57600090506118dc565b8160018114611844576002811461184e5761187d565b60019150506118dc565b60ff8411156118605761185f611781565b5b8360020a91508482111561187757611876611781565b5b506118dc565b5060208310610133831016604e8410600b84101617156118b25782820a9050838111156118ad576118ac611781565b5b6118dc565b6118bf84848460016117bd565b925090508184048111156118d6576118d5611781565b5b81810290505b9392505050565b60006118ee826114fd565b91506118f98361167d565b92506119267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611810565b905092915050565b6000611939826114fd565b9150611944836114fd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561197d5761197c611781565b5b828202905092915050565b600060408201905061199d6000830185611653565b6119aa60208301846115a9565b9392505050565b600081519050919050565b600081905092915050565b60006119d2826119b1565b6119dc81856119bc565b93506119ec8185602086016113fb565b80840191505092915050565b6000611a0482846119c7565b915081905092915050565b600082825260208201905092915050565b6000611a2b826119b1565b611a358185611a0f565b9350611a458185602086016113fb565b611a4e8161142e565b840191505092915050565b6000604082019050611a6e600083018561157f565b8181036020830152611a808184611a20565b90509392505050565b6000611a94826114fd565b9150611a9f836114fd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ad457611ad3611781565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611b3b6025836113ea565b9150611b4682611adf565b604082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bab826114fd565b9150611bb6836114fd565b925082611bc657611bc5611b71565b5b828204905092915050565b6000611bdc826114fd565b9150611be7836114fd565b925082821015611bfa57611bf9611781565b5b828203905092915050565b6000611c10826114fd565b9150611c1b836114fd565b9250611c487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611810565b905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611cac6024836113ea565b9150611cb782611c50565b604082019050919050565b60006020820190508181036000830152611cdb81611c9f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611d3e6022836113ea565b9150611d4982611ce2565b604082019050919050565b60006020820190508181036000830152611d6d81611d31565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611daa601d836113ea565b9150611db582611d74565b602082019050919050565b60006020820190508181036000830152611dd981611d9d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611e3c6025836113ea565b9150611e4782611de0565b604082019050919050565b60006020820190508181036000830152611e6b81611e2f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611ece6023836113ea565b9150611ed982611e72565b604082019050919050565b60006020820190508181036000830152611efd81611ec1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611f606026836113ea565b9150611f6b82611f04565b604082019050919050565b60006020820190508181036000830152611f8f81611f53565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ff26021836113ea565b9150611ffd82611f96565b604082019050919050565b6000602082019050818103600083015261202181611fe5565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006120846022836113ea565b915061208f82612028565b604082019050919050565b600060208201905081810360008301526120b381612077565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006120f0601f836113ea565b91506120fb826120ba565b602082019050919050565b6000602082019050818103600083015261211f816120e3565b905091905056fea26469706673582212201b80b780f20a20ad0b69c1a27845b1b45f11f7b7a17b7809cd2c65d7b2cdc31f64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c806342c6498a116100a2578063a457c2d711610071578063a457c2d714610309578063a9059cbb14610339578063bad914f414610369578063d54024b014610385578063dd62ed3e146103b557610116565b806342c6498a1461028157806370a082311461029f57806379cc6790146102cf57806395d89b41146102eb57610116565b806327e235e3116100e957806327e235e3146101b7578063313ce567146101e7578063374be0f014610205578063395093511461023557806342966c681461026557610116565b806306fdde031461011b578063095ea7b31461013957806318160ddd1461016957806323b872dd14610187575b600080fd5b6101236103e5565b6040516101309190611478565b60405180910390f35b610153600480360381019061014e9190611533565b610477565b604051610160919061158e565b60405180910390f35b61017161049a565b60405161017e91906115b8565b60405180910390f35b6101a1600480360381019061019c91906115d3565b6104a4565b6040516101ae919061158e565b60405180910390f35b6101d160048036038101906101cc9190611626565b6104d3565b6040516101de9190611662565b60405180910390f35b6101ef610506565b6040516101fc9190611699565b60405180910390f35b61021f600480360381019061021a91906116b4565b61050f565b60405161022c919061158e565b60405180910390f35b61024f600480360381019061024a9190611533565b610722565b60405161025c919061158e565b60405180910390f35b61027f600480360381019061027a91906116b4565b6107cc565b005b6102896107e0565b60405161029691906115b8565b60405180910390f35b6102b960048036038101906102b49190611626565b6107e6565b6040516102c691906115b8565b60405180910390f35b6102e960048036038101906102e49190611533565b61082e565b005b6102f361084e565b6040516103009190611478565b60405180910390f35b610323600480360381019061031e9190611533565b6108e0565b604051610330919061158e565b60405180910390f35b610353600480360381019061034e9190611533565b6109ca565b604051610360919061158e565b60405180910390f35b610383600480360381019061037e91906115d3565b6109ed565b005b61039f600480360381019061039a91906116b4565b610ab2565b6040516103ac91906115b8565b60405180910390f35b6103cf60048036038101906103ca91906116e1565b610b34565b6040516103dc91906115b8565b60405180910390f35b6060600380546103f490611750565b80601f016020809104026020016040519081016040528092919081815260200182805461042090611750565b801561046d5780601f106104425761010080835404028352916020019161046d565b820191906000526020600020905b81548152906001019060200180831161045057829003601f168201915b5050505050905090565b600080610482610bbb565b905061048f818585610bc3565b600191505092915050565b6000600254905090565b6000806104af610bbb565b90506104bc858285610d8c565b6104c7858585610e18565b60019150509392505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b6000610519610506565b600a61052591906118e3565b82610530919061192e565b915061053c3383611097565b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036105de57600091505061071d565b6000808273ffffffffffffffffffffffffffffffffffffffff16338660405160240161060b929190611988565b6040516020818303038152906040527fd688c1b9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161069591906119f8565b6000604051808303816000865af19150503d80600081146106d2576040519150601f19603f3d011682016040523d82523d6000602084013e6106d7565b606091505b50915091507f099ce1822f97ad29a195bc4c64a153893ef6da574f5d98df8c998c21d3496883828260405161070d929190611a59565b60405180910390a1600193505050505b919050565b60008061072d610bbb565b90506107c1818585600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107bc9190611a89565b610bc3565b600191505092915050565b6107dd6107d7610bbb565b82611097565b50565b60065481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108408261083a610bbb565b83610d8c565b61084a8282611097565b5050565b60606004805461085d90611750565b80601f016020809104026020016040519081016040528092919081815260200182805461088990611750565b80156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b6000806108eb610bbb565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890611b51565b60405180910390fd5b6109be8286868403610bc3565b60019250505092915050565b6000806109d5610bbb565b90506109e2818585610e18565b600191505092915050565b81600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600a610a7761126d565b610a819190611ba0565b905060008183610a919190611ba0565b90506000610a9e82610ab2565b9050610aaa8682611276565b505050505050565b600080429050600060065482610ac89190611bd1565b90506000620fd20082610adb9190611ba0565b90506000816062610aec9190611c05565b90506000826002610afd919061192e565b9050600081600a610b0e9190611c05565b8884610b1a919061192e565b610b249190611ba0565b9050809650505050505050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610c32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2990611cc2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890611d54565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610d7f91906115b8565b60405180910390a3505050565b6000610d988484610b34565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610e125781811015610e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfb90611dc0565b60405180910390fd5b610e118484848403610bc3565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7e90611e52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ef6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eed90611ee4565b60405180910390fd5b610f018383836113d5565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610f87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7e90611f76565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461101a9190611a89565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161107e91906115b8565b60405180910390a36110918484846113da565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fd90612008565b60405180910390fd5b611112826000836113d5565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118f9061209a565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282546111ef9190611bd1565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161125491906115b8565b60405180910390a3611268836000846113da565b505050565b60006032905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dc90612106565b60405180910390fd5b6112f1600083836113d5565b80600260008282546113039190611a89565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113589190611a89565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113bd91906115b8565b60405180910390a36113d1600083836113da565b5050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114195780820151818401526020810190506113fe565b83811115611428576000848401525b50505050565b6000601f19601f8301169050919050565b600061144a826113df565b61145481856113ea565b93506114648185602086016113fb565b61146d8161142e565b840191505092915050565b60006020820190508181036000830152611492818461143f565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114ca8261149f565b9050919050565b6114da816114bf565b81146114e557600080fd5b50565b6000813590506114f7816114d1565b92915050565b6000819050919050565b611510816114fd565b811461151b57600080fd5b50565b60008135905061152d81611507565b92915050565b6000806040838503121561154a5761154961149a565b5b6000611558858286016114e8565b92505060206115698582860161151e565b9150509250929050565b60008115159050919050565b61158881611573565b82525050565b60006020820190506115a3600083018461157f565b92915050565b6115b2816114fd565b82525050565b60006020820190506115cd60008301846115a9565b92915050565b6000806000606084860312156115ec576115eb61149a565b5b60006115fa868287016114e8565b935050602061160b868287016114e8565b925050604061161c8682870161151e565b9150509250925092565b60006020828403121561163c5761163b61149a565b5b600061164a848285016114e8565b91505092915050565b61165c816114bf565b82525050565b60006020820190506116776000830184611653565b92915050565b600060ff82169050919050565b6116938161167d565b82525050565b60006020820190506116ae600083018461168a565b92915050565b6000602082840312156116ca576116c961149a565b5b60006116d88482850161151e565b91505092915050565b600080604083850312156116f8576116f761149a565b5b6000611706858286016114e8565b9250506020611717858286016114e8565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061176857607f821691505b60208210810361177b5761177a611721565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115611807578086048111156117e3576117e2611781565b5b60018516156117f25780820291505b8081029050611800856117b0565b94506117c7565b94509492505050565b60008261182057600190506118dc565b8161182e57600090506118dc565b8160018114611844576002811461184e5761187d565b60019150506118dc565b60ff8411156118605761185f611781565b5b8360020a91508482111561187757611876611781565b5b506118dc565b5060208310610133831016604e8410600b84101617156118b25782820a9050838111156118ad576118ac611781565b5b6118dc565b6118bf84848460016117bd565b925090508184048111156118d6576118d5611781565b5b81810290505b9392505050565b60006118ee826114fd565b91506118f98361167d565b92506119267fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611810565b905092915050565b6000611939826114fd565b9150611944836114fd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561197d5761197c611781565b5b828202905092915050565b600060408201905061199d6000830185611653565b6119aa60208301846115a9565b9392505050565b600081519050919050565b600081905092915050565b60006119d2826119b1565b6119dc81856119bc565b93506119ec8185602086016113fb565b80840191505092915050565b6000611a0482846119c7565b915081905092915050565b600082825260208201905092915050565b6000611a2b826119b1565b611a358185611a0f565b9350611a458185602086016113fb565b611a4e8161142e565b840191505092915050565b6000604082019050611a6e600083018561157f565b8181036020830152611a808184611a20565b90509392505050565b6000611a94826114fd565b9150611a9f836114fd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ad457611ad3611781565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611b3b6025836113ea565b9150611b4682611adf565b604082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611bab826114fd565b9150611bb6836114fd565b925082611bc657611bc5611b71565b5b828204905092915050565b6000611bdc826114fd565b9150611be7836114fd565b925082821015611bfa57611bf9611781565b5b828203905092915050565b6000611c10826114fd565b9150611c1b836114fd565b9250611c487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611810565b905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611cac6024836113ea565b9150611cb782611c50565b604082019050919050565b60006020820190508181036000830152611cdb81611c9f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611d3e6022836113ea565b9150611d4982611ce2565b604082019050919050565b60006020820190508181036000830152611d6d81611d31565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611daa601d836113ea565b9150611db582611d74565b602082019050919050565b60006020820190508181036000830152611dd981611d9d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611e3c6025836113ea565b9150611e4782611de0565b604082019050919050565b60006020820190508181036000830152611e6b81611e2f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611ece6023836113ea565b9150611ed982611e72565b604082019050919050565b60006020820190508181036000830152611efd81611ec1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611f606026836113ea565b9150611f6b82611f04565b604082019050919050565b60006020820190508181036000830152611f8f81611f53565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611ff26021836113ea565b9150611ffd82611f96565b604082019050919050565b6000602082019050818103600083015261202181611fe5565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006120846022836113ea565b915061208f82612028565b604082019050919050565b600060208201905081810360008301526120b381612077565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006120f0601f836113ea565b91506120fb826120ba565b602082019050919050565b6000602082019050818103600083015261211f816120e3565b905091905056fea26469706673582212201b80b780f20a20ad0b69c1a27845b1b45f11f7b7a17b7809cd2c65d7b2cdc31f64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8561,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8567,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8569,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8571,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 8573,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 295,
        "contract": "contracts/PureToken.sol:PureToken",
        "label": "genesisTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}